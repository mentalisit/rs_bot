package discordBot

import (
	"fmt"
	"github.com/bwmarrin/discordgo"
	"log"
	"regexp"
	"rs_bot/config"
	"time"
)

var (
	BotId       string
	DSBot       *discordgo.Session
	err         error
	MentionUser *discordgo.User
	MentionRole discordgo.Role
	AddReact    *discordgo.MessageReactionAdd
	timekz      string
	lvlkz       string
)

type DiscordBot struct {
	DSBot       *discordgo.Session
	MentionUser *discordgo.User
	MentionRole discordgo.Role
	addReact    *discordgo.MessageReactionAdd
}

var (
	name1, name2, name3, name4 string
	time1, time2, time3, time4 string
)
var Embeds = &discordgo.MessageEmbed{}

func EmbedDS(name1, name2, name3, name4, lvlkz string) {
	Embeds = &discordgo.MessageEmbed{
		Author: &discordgo.MessageEmbedAuthor{},
		Color:  16711680,
		Description: fmt.Sprintf("–ñ–µ–ª–∞—é—â–∏–µ:üëá |  <:rs:918545444425072671> –Ω–∞ %s ", lvlkz) +
			fmt.Sprintf(
				"\n1Ô∏è‚É£ %s "+
					"\n2Ô∏è‚É£ %s "+
					"\n3Ô∏è‚É£ %s "+
					"\n4Ô∏è‚É£ %s "+
					"\n–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ö–ó #: ", name1, name2, name3, name4),

		Fields: []*discordgo.MessageEmbedField{
			&discordgo.MessageEmbedField{
				Name:   "—Ç—É—Ç –±–µ–¥–µ—Ç —á—Ç–æ-—Ç–æ ",
				Value:  "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ",
				Inline: true,
			}},
		Timestamp: time.Now().Format(time.RFC3339), // –¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø –î–ò–°–ö–û–†–î–ê
		Title:     "–û–ß–ï–†–ï–î–¨ –ö–ó  ",
	}
}

func Start() {
	DSBot, err = discordgo.New("Bot " + config.TokenD)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	u, err := DSBot.User("@me")
	if err != nil {
		fmt.Println(err.Error())
	}
	BotId = u.ID
	DSBot.AddHandler(messageHandler)
	err = DSBot.Open()
	if err != nil {
		fmt.Println(err.Error())
	}
	log.Println("–ë–æ—Ç DISCORD –∑–∞–ø—É—â–µ–Ω!!!")
}

func messageHandler(s *discordgo.Session, m *discordgo.MessageCreate) {
	if m.Author.ID == BotId {
		return
	}

	mtext := m.Content //—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	//tm := time.Local
	//mtime := tm
	//nameid:="<@!"+m.Message.Author.ID+">" //582882137842122773 ping
	nameid := m.Message.Author.Mention()
	mesid := m.ID             // –∏–¥ —Å–æ–æ–±—â–µ–Ω–∏—è 911747673093197844
	name := m.Author.Username // –∏–º—è Mentalisit
	guildid := m.GuildID      // id 700238199070523412
	chatid := m.ChannelID     //chat id 909527364730490890

	if m.Author.ID == s.State.User.ID {
		return
	}
	var kzb string
	var subs string
	var qwery string
	var rss string

	if len(m.Content) > 0 {
		str := mtext
		re := regexp.MustCompile(`^([4-9]|[1][0-1])([\+]|[-])(\d|\d{2})$`) //—Ç—Ä–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
		arr := (re.FindAllStringSubmatch(str, -1))
		if len(arr) > 0 {
			lvlkz = arr[0][1]
			kzb = arr[0][2]
			timekz = arr[0][3]
		}

		re2 := regexp.MustCompile(`^([4-9]|[1][0-1])([\+]|[-])$`) // –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
		arr2 := (re2.FindAllStringSubmatch(str, -1))
		if len(arr2) > 0 {
			lvlkz = arr2[0][1]
			kzb = arr2[0][2]
			timekz = "30"
		}

		re3 := regexp.MustCompile(`^([\+]|[-])([4-9]|[1][0-1])$`) // –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
		arr3 := (re3.FindAllStringSubmatch(str, -1))
		if len(arr3) > 0 {
			lvlkz = arr3[0][2]
			subs = arr3[0][1]
		}

		re4 := regexp.MustCompile(`^(["–æ"]|["–û"])([4-9]|[1][0-1])$`) // –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è  –æ—á–µ—Ä–µ–¥–∏
		arr4 := (re4.FindAllStringSubmatch(str, -1))
		if len(arr4) > 0 {
			qwery = arr4[0][1]
			lvlkz = arr4[0][2]
		}
		re5 := regexp.MustCompile(`^([4-9]|[1][0-1])([\+][\+])$`) //rs start
		arr5 := (re5.FindAllStringSubmatch(str, -1))
		if len(arr5) > 0 {
			lvlkz = arr5[0][1]
			rss = arr5[0][2]
		}

		if kzb == "+" {
			DSBot.ChannelMessageDelete(chatid, mesid)
			QueueDs(lvlkz, timekz, mesid, name, nameid, guildid, chatid)
		} else if kzb == "-" {
			DSBot.ChannelMessageDelete(chatid, mesid)
			removeQueue(name, nameid, lvlkz, chatid, guildid)

		} else if subs == "+" {
			//Subscribe(name, nameidid, lvlkz, mesid, chatid)

		} else if subs == "-" {
			//Unsubscribe(name,nameidid,lvlkz,mesid,chatid)
		} else if len(qwery) > 0 {
			DSBot.ChannelMessageDelete(chatid, mesid)
			//MsqlRsQ(lvlkz,chatid)

		} else if len(rss) > 0 {
			DSBot.ChannelMessageDelete(chatid, mesid)
			//MsqlRsStart(lvlkz,name,chatid)
		} else if mtext == "–°–ø—Ä–∞–≤–∫–∞" {
			DSBot.ChannelMessageDelete(chatid, mesid)
			hhelp(name, chatid)
		} else if mtext == "1" {
			DSBot.ChannelMessageDelete(chatid, mesid)
			//embedtest(chatid,nameid,guildid)
			//roleAdd()
			deleteSrorkz("Mentalisit", "4", "909527364730490890")

		} else if mtext == "2" {
			DSBot.ChannelMessageDelete(chatid, mesid)
			roleRemove()
		}
		//go Delete5s(chatid,mesid)
	}

	//MsqlPR_DS(lvlkz,timekz,mesid,name,nameid,guildID,chatid)
	GuildState, err := DSBot.State.Guild(guildid)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("serverName: ", GuildState.Name, "Test DS String: "+m.Content)
}
func roleToId(rolePing, guildid string) string {

	//	fmt.Println("resuit.roles ",GuildState.Roles)
	//	fmt.Println("errr",err)
	//GuildState,err:=GoBot.State.Guild(guildid)
	var pingId string          //—Å–æ–∑–¥–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	rolPing := "–∫–∑" + rolePing // –¥–æ–±–∞–≤–ª—è—é –±—É–∫–≤—ã
	r, err := DSBot.GuildRoles(guildid)
	if err != nil {
		fmt.Println(err)
	}
	//r:=GuildState.Roles
	l := len(r) // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
	i := 0
	for i < l { //–∏—â—É —Ä–æ–ª–∏ –≤ —Ü–∏–∫–ª–µ
		if r[i].Name == rolPing {
			pingId = r[i].ID
			//fmt.Println(pingId)
			return "<@&" + pingId + ">" // –≤–æ–∑–≤—Ä–∞—â–∞—é –ø–∏–Ω–≥ —Ä–æ–ª–∏
		} else {
			i = i + 1 // –ø—Ä–æ–¥–æ–ª–∂–∞—é –ø–µ—Ä–µ–±–æ—Ä
		}
	}
	return "(—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)" // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–æ–ª –Ω—É–∂–Ω–æ–π —Ä–æ–ª–∏
}
func Delete5s(chatid, dMessageId string) {
	time.Sleep(5 * time.Second)
	DSBot.ChannelMessageDelete(chatid, dMessageId)
}
func Delete1m(chatid, dMessageId string) {
	time.Sleep(1 * time.Minute)
	DSBot.ChannelMessageDelete(chatid, dMessageId)
}
func Delete3m(chatid, dMessageId string) {
	time.Sleep(3 * time.Minute)
	DSBot.ChannelMessageDelete(chatid, dMessageId)
}
func SendChannel(chatid, text string) string {
	message, err := DSBot.ChannelMessageSend(chatid, text)
	if err != nil {
		fmt.Println(err)
	}
	return message.ID
}

func embedtest(chatid, nameid, guildid string) {
	lvlkz = "6"
	name1 = nameid + "  üïí " + timekz
	name2 = ""
	name3 = ""
	name4 = ""
	lvlk := roleToId(lvlkz, guildid)
	//fmt.Println(lvlk)
	EmbedDS(name1, name2, name3, name4, lvlk)
	mes, err := DSBot.ChannelMessageSendComplex(chatid, &discordgo.MessageSend{
		Content: nameid + " –∑–∞–ø—É—Å—Ç–∏–ª –æ—á–µ—Ä–µ–¥—å " + lvlk})
	if err != nil {
		fmt.Println(err)
	}
	var mesContentNil string
	DSBot.ChannelMessageEditComplex(&discordgo.MessageEdit{
		Content: &mesContentNil,
		Embed:   Embeds,
		ID:      mes.ID,
		Channel: chatid,
	})
}

func removeDuplicateElementString(languages []string) []string {
	result := make([]string, 0, len(languages))
	temp := map[string]struct{}{}
	for _, item := range languages {
		if _, ok := temp[item]; !ok {
			temp[item] = struct{}{}
			result = append(result, item)
		}
	}
	return result
}
